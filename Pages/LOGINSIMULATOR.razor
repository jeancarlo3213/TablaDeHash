@page "/LOGINSIMULATOR"
@using TablaDeHash.Models
@inject NavigationManager Navigation

<h3 class="text-center text-white">Simulación de Login con Tabla de Hash</h3>

<div class="form-group">
    <label class="text-white">Clave:</label>
    <input @bind="clave" class="form-control bg-dark text-white" />
</div>
<div class="form-group">
    <label class="text-white">Número de Celular:</label>
    <input @bind="numeroCelular" class="form-control bg-dark text-white" />
</div>
<div class="form-group">
    <button @onclick="AgregarUsuario" class="btn btn-primary">Agregar</button>
</div>

<div class="form-group">
    <label class="text-white">Clave para Comprobar:</label>
    <input @bind="claveComprobar" class="form-control bg-dark text-white" />
</div>
<div la="form-group">
    <label class="text-white">Número de Celular para Comprobar:</label>
    <input @bind="numeroComprobar" class="form-control bg-dark text-white" />
</div>
<div class="form-group">
    <button @onclick="ComprobarUsuario" class="btn btn-secondary">Comprobar</button>
</div>

<div class="form-group">
    <p class="text-white">Resultado: @resultadoComprobacion</p>
    <p class="text-white">Hash de Agregar: @hashAgregar</p>
    <p class="text-white">Hash de Comprobar: @hashComprobar</p>
</div>

<h4 class="text-center text-white">Contenido de la Tabla de Hash:</h4>
<table class="table table-dark">
    <thead>
        <tr>
            <th>Índice</th>
            <th>Clave - Número de Celular</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < todosLosNodosAgrupados.Length; i++)
        {
            if (todosLosNodosAgrupados[i] != null)
            {
                <tr>
                    <td>@todosLosNodosAgrupados[i].Indice</td>
                    <td>
                        @if (todosLosNodosAgrupados[i].PrimerNodo != null)
                        {
                            Nodo nodoActual = todosLosNodosAgrupados[i].PrimerNodo;
                            while (nodoActual != null)
                            {
                                @($"{nodoActual.Clave} - {nodoActual.Valor}")
                                if (nodoActual.Siguiente != null)
                                {
                                    <span> → </span>
                                }
                                nodoActual = nodoActual.Siguiente;
                            }
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private string clave;
    private string numeroCelular;
    private string claveComprobar;
    private string numeroComprobar;
    private string resultadoComprobacion;
    private int hashAgregar;
    private int hashComprobar;
    private TablaDeHashUsuariosASCII tablaHash;
    private NodoAgrupado[] todosLosNodosAgrupados;

    protected override void OnInitialized()
    {
        tablaHash = new TablaDeHashUsuariosASCII(10);
        ActualizarTabla();
    }

    private void AgregarUsuario()
    {
        tablaHash.Agregar(clave, numeroCelular, out hashAgregar);
        clave = string.Empty;
        numeroCelular = string.Empty;
        ActualizarTabla();
    }

    private void ComprobarUsuario()
    {
        string valor = tablaHash.ObtenerValor(claveComprobar, out hashComprobar);
        if (valor == numeroComprobar)
        {
            resultadoComprobacion = "Usuario comprobado correctamente";
        }
        else
        {
            resultadoComprobacion = "Falló la comprobación del usuario";
        }
    }

    private void ActualizarTabla()
    {
        todosLosNodosAgrupados = tablaHash.ObtenerTodosLosNodosAgrupados();
    }
}
